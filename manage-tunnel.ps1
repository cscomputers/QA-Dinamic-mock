# Script para gerenciar t√∫nel p√∫blico da API QA Mocks
# Autor: Sistema QA Mocks
# Data: 22/10/2025

param(
    [string]$Action = "help",
    [string]$Port = "40028",
    [string]$Method = "localtunnel"
)

function Show-Header {
    Write-Host "üåê QA MOCKS - GERENCIADOR DE T√öNEL P√öBLICO" -ForegroundColor Cyan
    Write-Host "=" * 50 -ForegroundColor Cyan
    Write-Host ""
}

function Show-Help {
    Show-Header
    Write-Host "üìã USO:" -ForegroundColor Yellow
    Write-Host "  .\manage-tunnel.ps1 [a√ß√£o] [op√ß√µes]" -ForegroundColor White
    Write-Host ""
    Write-Host "üöÄ A√á√ïES DISPON√çVEIS:" -ForegroundColor Yellow
    Write-Host "  start     - Inicia o t√∫nel p√∫blico" -ForegroundColor Green
    Write-Host "  stop      - Para o t√∫nel" -ForegroundColor Red
    Write-Host "  status    - Verifica status da API" -ForegroundColor Blue
    Write-Host "  test      - Testa todos os endpoints" -ForegroundColor Magenta
    Write-Host "  help      - Mostra esta ajuda" -ForegroundColor Gray
    Write-Host ""
    Write-Host "‚öôÔ∏è  OP√á√ïES:" -ForegroundColor Yellow
    Write-Host "  -Port     - Porta da API (padr√£o: 40028)" -ForegroundColor White
    Write-Host "  -Method   - M√©todo do t√∫nel (localtunnel|ngrok)" -ForegroundColor White
    Write-Host ""
    Write-Host "üìù EXEMPLOS:" -ForegroundColor Yellow
    Write-Host "  .\manage-tunnel.ps1 start" -ForegroundColor Green
    Write-Host "  .\manage-tunnel.ps1 test" -ForegroundColor Green
    Write-Host "  .\manage-tunnel.ps1 status" -ForegroundColor Green
}

function Test-LocalAPI {
    Write-Host "üîç Testando API local na porta $Port..." -ForegroundColor Blue
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:$Port/status" -Method GET
        Write-Host "‚úÖ API local est√° respondendo" -ForegroundColor Green
        Write-Host "   Banco conectado: $($response.database_connected)" -ForegroundColor White
        Write-Host "   Modo: $($response.storage_mode)" -ForegroundColor White
        Write-Host "   Total mocks: $($response.total_mocks)" -ForegroundColor White
        return $true
    }
    catch {
        Write-Host "‚ùå API local n√£o est√° respondendo na porta $Port" -ForegroundColor Red
        Write-Host "   Execute primeiro: python start_api.py" -ForegroundColor Yellow
        return $false
    }
}

function Start-Tunnel {
    Show-Header
    
    if (-not (Test-LocalAPI)) {
        return
    }
    
    Write-Host "üåê Iniciando t√∫nel p√∫blico ($Method)..." -ForegroundColor Blue
    Write-Host ""
    
    if ($Method -eq "localtunnel") {
        Write-Host "üì° Verificando LocalTunnel..." -ForegroundColor Blue
        try {
            # Verifica se localtunnel est√° instalado
            npm list -g localtunnel *>$null
            if ($LASTEXITCODE -ne 0) {
                Write-Host "üì¶ Instalando LocalTunnel..." -ForegroundColor Yellow
                npm install -g localtunnel
            }
            
            Write-Host "üöÄ Iniciando t√∫nel LocalTunnel na porta $Port..." -ForegroundColor Green
            Write-Host "   Aguarde alguns segundos para obter a URL..." -ForegroundColor Yellow
            Write-Host ""
            
            # Inicia o t√∫nel
            Start-Process powershell -ArgumentList "-NoExit", "-Command", "npx localtunnel --port $Port"
            
            Start-Sleep -Seconds 3
            Write-Host "‚úÖ T√∫nel iniciado!" -ForegroundColor Green
            Write-Host "üîó Sua URL p√∫blica ser√° mostrada na nova janela" -ForegroundColor Cyan
            
        }
        catch {
            Write-Host "‚ùå Erro ao iniciar LocalTunnel: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    elseif ($Method -eq "ngrok") {
        Write-Host "üì° Verificando ngrok..." -ForegroundColor Blue
        try {
            $ngrokVersion = ngrok version 2>$null
            if ($LASTEXITCODE -eq 0) {
                Write-Host "üöÄ Iniciando t√∫nel ngrok na porta $Port..." -ForegroundColor Green
                Start-Process powershell -ArgumentList "-NoExit", "-Command", "ngrok http $Port"
                Write-Host "‚úÖ T√∫nel ngrok iniciado!" -ForegroundColor Green
            }
            else {
                Write-Host "‚ùå ngrok n√£o est√° instalado ou configurado" -ForegroundColor Red
                Write-Host "   Use: .\manage-tunnel.ps1 start -Method localtunnel" -ForegroundColor Yellow
            }
        }
        catch {
            Write-Host "‚ùå Erro ao iniciar ngrok: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

function Stop-Tunnel {
    Show-Header
    Write-Host "üõë Parando t√∫neis..." -ForegroundColor Red
    
    # Para processos do LocalTunnel
    Get-Process | Where-Object {$_.ProcessName -like "*node*" -or $_.CommandLine -like "*localtunnel*"} | Stop-Process -Force -ErrorAction SilentlyContinue
    
    # Para processos do ngrok
    Get-Process | Where-Object {$_.ProcessName -like "*ngrok*"} | Stop-Process -Force -ErrorAction SilentlyContinue
    
    Write-Host "‚úÖ T√∫neis interrompidos" -ForegroundColor Green
}

function Test-AllEndpoints {
    param([string]$BaseUrl = "http://localhost:$Port")
    
    Show-Header
    Write-Host "üß™ TESTANDO TODOS OS ENDPOINTS" -ForegroundColor Magenta
    Write-Host "üîó URL Base: $BaseUrl" -ForegroundColor Blue
    Write-Host ""
    
    $tests = @(
        @{
            Name = "Status da API"
            Method = "GET"
            Endpoint = "/status"
            Expected = "200"
        },
        @{
            Name = "Listar Mocks"
            Method = "GET" 
            Endpoint = "/mocks"
            Expected = "200"
        },
        @{
            Name = "Documenta√ß√£o da API"
            Method = "GET"
            Endpoint = "/docs"
            Expected = "200"
        },
        @{
            Name = "OpenAPI Schema"
            Method = "GET"
            Endpoint = "/openapi.json"
            Expected = "200"
        }
    )
    
    $passed = 0
    $total = $tests.Count
    
    foreach ($test in $tests) {
        Write-Host "üìã Testando: $($test.Name)" -ForegroundColor Blue
        Write-Host "   $($test.Method) $($test.Endpoint)" -ForegroundColor Gray
        
        try {
            $url = "$BaseUrl$($test.Endpoint)"
            $response = Invoke-WebRequest -Uri $url -Method $test.Method -UseBasicParsing
            
            if ($response.StatusCode -eq $test.Expected) {
                Write-Host "   ‚úÖ PASSOU ($($response.StatusCode))" -ForegroundColor Green
                $passed++
            }
            else {
                Write-Host "   ‚ùå FALHOU ($($response.StatusCode))" -ForegroundColor Red
            }
        }
        catch {
            Write-Host "   ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
        }
        Write-Host ""
    }
    
    Write-Host "üìä RESULTADO FINAL:" -ForegroundColor Yellow
    Write-Host "   ‚úÖ Passou: $passed/$total" -ForegroundColor Green
    Write-Host "   üìà Taxa de sucesso: $([math]::Round(($passed/$total)*100, 2))%" -ForegroundColor Cyan
}

function Show-Status {
    Show-Header
    Write-Host "üìä STATUS DO SISTEMA QA MOCKS" -ForegroundColor Blue
    Write-Host ""
    
    # Testa API local
    Write-Host "üîç API Local (porta $Port):" -ForegroundColor Yellow
    if (Test-LocalAPI) {
        $apiStatus = "üü¢ ONLINE"
    } else {
        $apiStatus = "üî¥ OFFLINE"
    }
    Write-Host "   Status: $apiStatus" -ForegroundColor White
    
    Write-Host ""
    
    # Verifica processos de t√∫nel
    Write-Host "üåê T√∫neis Ativos:" -ForegroundColor Yellow
    $tunnelProcesses = @()
    
    # LocalTunnel
    $ltProcesses = Get-Process | Where-Object {$_.CommandLine -like "*localtunnel*" -or $_.ProcessName -like "*node*"} -ErrorAction SilentlyContinue
    if ($ltProcesses) {
        $tunnelProcesses += "LocalTunnel"
    }
    
    # ngrok
    $ngrokProcesses = Get-Process | Where-Object {$_.ProcessName -like "*ngrok*"} -ErrorAction SilentlyContinue
    if ($ngrokProcesses) {
        $tunnelProcesses += "ngrok"
    }
    
    if ($tunnelProcesses.Count -gt 0) {
        Write-Host "   üü¢ Ativos: $($tunnelProcesses -join ', ')" -ForegroundColor Green
    } else {
        Write-Host "   üî¥ Nenhum t√∫nel ativo" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üí° COMANDOS √öTEIS:" -ForegroundColor Cyan
    Write-Host "   .\manage-tunnel.ps1 start    # Iniciar t√∫nel" -ForegroundColor White
    Write-Host "   .\manage-tunnel.ps1 test     # Testar endpoints" -ForegroundColor White
    Write-Host "   .\manage-tunnel.ps1 stop     # Parar t√∫neis" -ForegroundColor White
}

# Execu√ß√£o principal
switch ($Action.ToLower()) {
    "start" { Start-Tunnel }
    "stop" { Stop-Tunnel }
    "status" { Show-Status }
    "test" { Test-AllEndpoints }
    "help" { Show-Help }
    default { Show-Help }
}
